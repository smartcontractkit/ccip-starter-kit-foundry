// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cache_gold_child

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

var CacheGoldChildMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerYear\",\"type\":\"uint256\"}],\"name\":\"AccountInactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountReActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ENFORCER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INACTIVE_THRESHOLD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfNoFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcInactiveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcOwedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcStorageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calcTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"daysSinceActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"daysSincePaidStorageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"forcePayFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__feeEnforcer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__fxManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__connectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__redeemAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStorageFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTransferFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maximumTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payStorageFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAccountInactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__fxManager\",\"type\":\"address\"}],\"name\":\"setFxManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRedeemAddress\",\"type\":\"address\"}],\"name\":\"setRedeemAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setStorageFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysGracePeriod\",\"type\":\"uint256\"}],\"name\":\"setStorageFeeGracePeriodDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTransferFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysSinceStoragePaid\",\"type\":\"uint256\"}],\"name\":\"storageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageFeeGracePeriodDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unsetFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

var CacheGoldChildABI = CacheGoldChildMetaData.ABI

var CacheGoldChildBin = CacheGoldChildMetaData.Bin

func DeployCacheGoldChild(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CacheGoldChild, error) {
	parsed, err := CacheGoldChildMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CacheGoldChildBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CacheGoldChild{CacheGoldChildCaller: CacheGoldChildCaller{contract: contract}, CacheGoldChildTransactor: CacheGoldChildTransactor{contract: contract}, CacheGoldChildFilterer: CacheGoldChildFilterer{contract: contract}}, nil
}

type CacheGoldChild struct {
	address common.Address
	abi     abi.ABI
	CacheGoldChildCaller
	CacheGoldChildTransactor
	CacheGoldChildFilterer
}

type CacheGoldChildCaller struct {
	contract *bind.BoundContract
}

type CacheGoldChildTransactor struct {
	contract *bind.BoundContract
}

type CacheGoldChildFilterer struct {
	contract *bind.BoundContract
}

type CacheGoldChildSession struct {
	Contract     *CacheGoldChild
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CacheGoldChildCallerSession struct {
	Contract *CacheGoldChildCaller
	CallOpts bind.CallOpts
}

type CacheGoldChildTransactorSession struct {
	Contract     *CacheGoldChildTransactor
	TransactOpts bind.TransactOpts
}

type CacheGoldChildRaw struct {
	Contract *CacheGoldChild
}

type CacheGoldChildCallerRaw struct {
	Contract *CacheGoldChildCaller
}

type CacheGoldChildTransactorRaw struct {
	Contract *CacheGoldChildTransactor
}

func NewCacheGoldChild(address common.Address, backend bind.ContractBackend) (*CacheGoldChild, error) {
	abi, err := abi.JSON(strings.NewReader(CacheGoldChildABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCacheGoldChild(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChild{address: address, abi: abi, CacheGoldChildCaller: CacheGoldChildCaller{contract: contract}, CacheGoldChildTransactor: CacheGoldChildTransactor{contract: contract}, CacheGoldChildFilterer: CacheGoldChildFilterer{contract: contract}}, nil
}

func NewCacheGoldChildCaller(address common.Address, caller bind.ContractCaller) (*CacheGoldChildCaller, error) {
	contract, err := bindCacheGoldChild(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildCaller{contract: contract}, nil
}

func NewCacheGoldChildTransactor(address common.Address, transactor bind.ContractTransactor) (*CacheGoldChildTransactor, error) {
	contract, err := bindCacheGoldChild(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildTransactor{contract: contract}, nil
}

func NewCacheGoldChildFilterer(address common.Address, filterer bind.ContractFilterer) (*CacheGoldChildFilterer, error) {
	contract, err := bindCacheGoldChild(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildFilterer{contract: contract}, nil
}

func bindCacheGoldChild(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CacheGoldChildABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_CacheGoldChild *CacheGoldChildRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CacheGoldChild.Contract.CacheGoldChildCaller.contract.Call(opts, result, method, params...)
}

func (_CacheGoldChild *CacheGoldChildRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.CacheGoldChildTransactor.contract.Transfer(opts)
}

func (_CacheGoldChild *CacheGoldChildRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.CacheGoldChildTransactor.contract.Transact(opts, method, params...)
}

func (_CacheGoldChild *CacheGoldChildCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CacheGoldChild.Contract.contract.Call(opts, result, method, params...)
}

func (_CacheGoldChild *CacheGoldChildTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.contract.Transfer(opts)
}

func (_CacheGoldChild *CacheGoldChildTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.contract.Transact(opts, method, params...)
}

func (_CacheGoldChild *CacheGoldChildCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CacheGoldChild.Contract.DEFAULTADMINROLE(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CacheGoldChild.Contract.DEFAULTADMINROLE(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) FEEENFORCERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "FEE_ENFORCER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) FEEENFORCERROLE() ([32]byte, error) {
	return _CacheGoldChild.Contract.FEEENFORCERROLE(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) FEEENFORCERROLE() ([32]byte, error) {
	return _CacheGoldChild.Contract.FEEENFORCERROLE(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) INACTIVETHRESHOLDDAYS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "INACTIVE_THRESHOLD_DAYS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) INACTIVETHRESHOLDDAYS() (*big.Int, error) {
	return _CacheGoldChild.Contract.INACTIVETHRESHOLDDAYS(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) INACTIVETHRESHOLDDAYS() (*big.Int, error) {
	return _CacheGoldChild.Contract.INACTIVETHRESHOLDDAYS(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.Allowance(&_CacheGoldChild.CallOpts, owner, spender)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.Allowance(&_CacheGoldChild.CallOpts, owner, spender)
}

func (_CacheGoldChild *CacheGoldChildCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.BalanceOf(&_CacheGoldChild.CallOpts, owner)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.BalanceOf(&_CacheGoldChild.CallOpts, owner)
}

func (_CacheGoldChild *CacheGoldChildCaller) BalanceOfNoFees(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "balanceOfNoFees", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) BalanceOfNoFees(owner common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.BalanceOfNoFees(&_CacheGoldChild.CallOpts, owner)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) BalanceOfNoFees(owner common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.BalanceOfNoFees(&_CacheGoldChild.CallOpts, owner)
}

func (_CacheGoldChild *CacheGoldChildCaller) CalcInactiveFee(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "calcInactiveFee", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) CalcInactiveFee(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcInactiveFee(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) CalcInactiveFee(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcInactiveFee(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) CalcOwedFees(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "calcOwedFees", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) CalcOwedFees(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcOwedFees(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) CalcOwedFees(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcOwedFees(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) CalcStorageFee(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "calcStorageFee", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) CalcStorageFee(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcStorageFee(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) CalcStorageFee(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcStorageFee(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) CalcTransferFee(opts *bind.CallOpts, account common.Address, value *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "calcTransferFee", account, value)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) CalcTransferFee(account common.Address, value *big.Int) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcTransferFee(&_CacheGoldChild.CallOpts, account, value)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) CalcTransferFee(account common.Address, value *big.Int) (*big.Int, error) {
	return _CacheGoldChild.Contract.CalcTransferFee(&_CacheGoldChild.CallOpts, account, value)
}

func (_CacheGoldChild *CacheGoldChildCaller) ConnectedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "connectedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) ConnectedToken() (common.Address, error) {
	return _CacheGoldChild.Contract.ConnectedToken(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) ConnectedToken() (common.Address, error) {
	return _CacheGoldChild.Contract.ConnectedToken(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) DaysSinceActivity(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "daysSinceActivity", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) DaysSinceActivity(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.DaysSinceActivity(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) DaysSinceActivity(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.DaysSinceActivity(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) DaysSincePaidStorageFee(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "daysSincePaidStorageFee", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) DaysSincePaidStorageFee(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.DaysSincePaidStorageFee(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) DaysSincePaidStorageFee(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.DaysSincePaidStorageFee(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) Decimals() (uint8, error) {
	return _CacheGoldChild.Contract.Decimals(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) Decimals() (uint8, error) {
	return _CacheGoldChild.Contract.Decimals(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) FxManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "fxManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) FxManager() (common.Address, error) {
	return _CacheGoldChild.Contract.FxManager(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) FxManager() (common.Address, error) {
	return _CacheGoldChild.Contract.FxManager(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) GetFeeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "getFeeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) GetFeeAddress() (common.Address, error) {
	return _CacheGoldChild.Contract.GetFeeAddress(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) GetFeeAddress() (common.Address, error) {
	return _CacheGoldChild.Contract.GetFeeAddress(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CacheGoldChild.Contract.GetRoleAdmin(&_CacheGoldChild.CallOpts, role)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CacheGoldChild.Contract.GetRoleAdmin(&_CacheGoldChild.CallOpts, role)
}

func (_CacheGoldChild *CacheGoldChildCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.HasRole(&_CacheGoldChild.CallOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.HasRole(&_CacheGoldChild.CallOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) IsAllFeeExempt(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "isAllFeeExempt", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) IsAllFeeExempt(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsAllFeeExempt(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) IsAllFeeExempt(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsAllFeeExempt(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) IsInactive(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "isInactive", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) IsInactive(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsInactive(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) IsInactive(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsInactive(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) IsStorageFeeExempt(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "isStorageFeeExempt", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) IsStorageFeeExempt(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsStorageFeeExempt(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) IsStorageFeeExempt(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsStorageFeeExempt(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) IsTransferFeeExempt(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "isTransferFeeExempt", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) IsTransferFeeExempt(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsTransferFeeExempt(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) IsTransferFeeExempt(account common.Address) (bool, error) {
	return _CacheGoldChild.Contract.IsTransferFeeExempt(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) MaximumTransferAmount(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "maximumTransferAmount", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) MaximumTransferAmount(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.MaximumTransferAmount(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) MaximumTransferAmount(account common.Address) (*big.Int, error) {
	return _CacheGoldChild.Contract.MaximumTransferAmount(&_CacheGoldChild.CallOpts, account)
}

func (_CacheGoldChild *CacheGoldChildCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) Name() (string, error) {
	return _CacheGoldChild.Contract.Name(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) Name() (string, error) {
	return _CacheGoldChild.Contract.Name(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) RedeemAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "redeemAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) RedeemAddress() (common.Address, error) {
	return _CacheGoldChild.Contract.RedeemAddress(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) RedeemAddress() (common.Address, error) {
	return _CacheGoldChild.Contract.RedeemAddress(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) StorageFee(opts *bind.CallOpts, balance *big.Int, daysSinceStoragePaid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "storageFee", balance, daysSinceStoragePaid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) StorageFee(balance *big.Int, daysSinceStoragePaid *big.Int) (*big.Int, error) {
	return _CacheGoldChild.Contract.StorageFee(&_CacheGoldChild.CallOpts, balance, daysSinceStoragePaid)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) StorageFee(balance *big.Int, daysSinceStoragePaid *big.Int) (*big.Int, error) {
	return _CacheGoldChild.Contract.StorageFee(&_CacheGoldChild.CallOpts, balance, daysSinceStoragePaid)
}

func (_CacheGoldChild *CacheGoldChildCaller) StorageFeeGracePeriodDays(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "storageFeeGracePeriodDays")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) StorageFeeGracePeriodDays() (*big.Int, error) {
	return _CacheGoldChild.Contract.StorageFeeGracePeriodDays(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) StorageFeeGracePeriodDays() (*big.Int, error) {
	return _CacheGoldChild.Contract.StorageFeeGracePeriodDays(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CacheGoldChild.Contract.SupportsInterface(&_CacheGoldChild.CallOpts, interfaceId)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CacheGoldChild.Contract.SupportsInterface(&_CacheGoldChild.CallOpts, interfaceId)
}

func (_CacheGoldChild *CacheGoldChildCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) Symbol() (string, error) {
	return _CacheGoldChild.Contract.Symbol(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) Symbol() (string, error) {
	return _CacheGoldChild.Contract.Symbol(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) TotalCirculation(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "totalCirculation")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) TotalCirculation() (*big.Int, error) {
	return _CacheGoldChild.Contract.TotalCirculation(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) TotalCirculation() (*big.Int, error) {
	return _CacheGoldChild.Contract.TotalCirculation(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) TotalSupply() (*big.Int, error) {
	return _CacheGoldChild.Contract.TotalSupply(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) TotalSupply() (*big.Int, error) {
	return _CacheGoldChild.Contract.TotalSupply(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCaller) TransferFeeBasisPoints(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CacheGoldChild.contract.Call(opts, &out, "transferFeeBasisPoints")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CacheGoldChild *CacheGoldChildSession) TransferFeeBasisPoints() (*big.Int, error) {
	return _CacheGoldChild.Contract.TransferFeeBasisPoints(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildCallerSession) TransferFeeBasisPoints() (*big.Int, error) {
	return _CacheGoldChild.Contract.TransferFeeBasisPoints(&_CacheGoldChild.CallOpts)
}

func (_CacheGoldChild *CacheGoldChildTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "approve", spender, value)
}

func (_CacheGoldChild *CacheGoldChildSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Approve(&_CacheGoldChild.TransactOpts, spender, value)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Approve(&_CacheGoldChild.TransactOpts, spender, value)
}

func (_CacheGoldChild *CacheGoldChildTransactor) Burn(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "burn", account, amount)
}

func (_CacheGoldChild *CacheGoldChildSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Burn(&_CacheGoldChild.TransactOpts, account, amount)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Burn(&_CacheGoldChild.TransactOpts, account, amount)
}

func (_CacheGoldChild *CacheGoldChildTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

func (_CacheGoldChild *CacheGoldChildSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.DecreaseAllowance(&_CacheGoldChild.TransactOpts, spender, subtractedValue)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.DecreaseAllowance(&_CacheGoldChild.TransactOpts, spender, subtractedValue)
}

func (_CacheGoldChild *CacheGoldChildTransactor) ForcePayFees(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "forcePayFees", account)
}

func (_CacheGoldChild *CacheGoldChildSession) ForcePayFees(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.ForcePayFees(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) ForcePayFees(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.ForcePayFees(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "grantRole", role, account)
}

func (_CacheGoldChild *CacheGoldChildSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.GrantRole(&_CacheGoldChild.TransactOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.GrantRole(&_CacheGoldChild.TransactOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

func (_CacheGoldChild *CacheGoldChildSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.IncreaseAllowance(&_CacheGoldChild.TransactOpts, spender, addedValue)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.IncreaseAllowance(&_CacheGoldChild.TransactOpts, spender, addedValue)
}

func (_CacheGoldChild *CacheGoldChildTransactor) Initialize(opts *bind.TransactOpts, __feeAddress common.Address, __feeEnforcer common.Address, __fxManager_ common.Address, __connectedToken common.Address, __redeemAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "initialize", __feeAddress, __feeEnforcer, __fxManager_, __connectedToken, __redeemAddress)
}

func (_CacheGoldChild *CacheGoldChildSession) Initialize(__feeAddress common.Address, __feeEnforcer common.Address, __fxManager_ common.Address, __connectedToken common.Address, __redeemAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Initialize(&_CacheGoldChild.TransactOpts, __feeAddress, __feeEnforcer, __fxManager_, __connectedToken, __redeemAddress)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) Initialize(__feeAddress common.Address, __feeEnforcer common.Address, __fxManager_ common.Address, __connectedToken common.Address, __redeemAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Initialize(&_CacheGoldChild.TransactOpts, __feeAddress, __feeEnforcer, __fxManager_, __connectedToken, __redeemAddress)
}

func (_CacheGoldChild *CacheGoldChildTransactor) Mint(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "mint", user, amount)
}

func (_CacheGoldChild *CacheGoldChildSession) Mint(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Mint(&_CacheGoldChild.TransactOpts, user, amount)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) Mint(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Mint(&_CacheGoldChild.TransactOpts, user, amount)
}

func (_CacheGoldChild *CacheGoldChildTransactor) PayStorageFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "payStorageFee")
}

func (_CacheGoldChild *CacheGoldChildSession) PayStorageFee() (*types.Transaction, error) {
	return _CacheGoldChild.Contract.PayStorageFee(&_CacheGoldChild.TransactOpts)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) PayStorageFee() (*types.Transaction, error) {
	return _CacheGoldChild.Contract.PayStorageFee(&_CacheGoldChild.TransactOpts)
}

func (_CacheGoldChild *CacheGoldChildTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "renounceRole", role, account)
}

func (_CacheGoldChild *CacheGoldChildSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.RenounceRole(&_CacheGoldChild.TransactOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.RenounceRole(&_CacheGoldChild.TransactOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "revokeRole", role, account)
}

func (_CacheGoldChild *CacheGoldChildSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.RevokeRole(&_CacheGoldChild.TransactOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.RevokeRole(&_CacheGoldChild.TransactOpts, role, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetAccountInactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setAccountInactive", account)
}

func (_CacheGoldChild *CacheGoldChildSession) SetAccountInactive(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetAccountInactive(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetAccountInactive(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetAccountInactive(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetFeeAddress(opts *bind.TransactOpts, newFeeAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setFeeAddress", newFeeAddress)
}

func (_CacheGoldChild *CacheGoldChildSession) SetFeeAddress(newFeeAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetFeeAddress(&_CacheGoldChild.TransactOpts, newFeeAddress)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetFeeAddress(newFeeAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetFeeAddress(&_CacheGoldChild.TransactOpts, newFeeAddress)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setFeeExempt", account)
}

func (_CacheGoldChild *CacheGoldChildSession) SetFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetFxManager(opts *bind.TransactOpts, __fxManager common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setFxManager", __fxManager)
}

func (_CacheGoldChild *CacheGoldChildSession) SetFxManager(__fxManager common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetFxManager(&_CacheGoldChild.TransactOpts, __fxManager)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetFxManager(__fxManager common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetFxManager(&_CacheGoldChild.TransactOpts, __fxManager)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetRedeemAddress(opts *bind.TransactOpts, newRedeemAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setRedeemAddress", newRedeemAddress)
}

func (_CacheGoldChild *CacheGoldChildSession) SetRedeemAddress(newRedeemAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetRedeemAddress(&_CacheGoldChild.TransactOpts, newRedeemAddress)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetRedeemAddress(newRedeemAddress common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetRedeemAddress(&_CacheGoldChild.TransactOpts, newRedeemAddress)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetStorageFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setStorageFeeExempt", account)
}

func (_CacheGoldChild *CacheGoldChildSession) SetStorageFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetStorageFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetStorageFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetStorageFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetStorageFeeGracePeriodDays(opts *bind.TransactOpts, daysGracePeriod *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setStorageFeeGracePeriodDays", daysGracePeriod)
}

func (_CacheGoldChild *CacheGoldChildSession) SetStorageFeeGracePeriodDays(daysGracePeriod *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetStorageFeeGracePeriodDays(&_CacheGoldChild.TransactOpts, daysGracePeriod)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetStorageFeeGracePeriodDays(daysGracePeriod *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetStorageFeeGracePeriodDays(&_CacheGoldChild.TransactOpts, daysGracePeriod)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetTransferFeeBasisPoints(opts *bind.TransactOpts, fee *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setTransferFeeBasisPoints", fee)
}

func (_CacheGoldChild *CacheGoldChildSession) SetTransferFeeBasisPoints(fee *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetTransferFeeBasisPoints(&_CacheGoldChild.TransactOpts, fee)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetTransferFeeBasisPoints(fee *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetTransferFeeBasisPoints(&_CacheGoldChild.TransactOpts, fee)
}

func (_CacheGoldChild *CacheGoldChildTransactor) SetTransferFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "setTransferFeeExempt", account)
}

func (_CacheGoldChild *CacheGoldChildSession) SetTransferFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetTransferFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) SetTransferFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.SetTransferFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "transfer", to, value)
}

func (_CacheGoldChild *CacheGoldChildSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Transfer(&_CacheGoldChild.TransactOpts, to, value)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.Transfer(&_CacheGoldChild.TransactOpts, to, value)
}

func (_CacheGoldChild *CacheGoldChildTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "transferFrom", from, to, value)
}

func (_CacheGoldChild *CacheGoldChildSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.TransferFrom(&_CacheGoldChild.TransactOpts, from, to, value)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.TransferFrom(&_CacheGoldChild.TransactOpts, from, to, value)
}

func (_CacheGoldChild *CacheGoldChildTransactor) UnsetFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.contract.Transact(opts, "unsetFeeExempt", account)
}

func (_CacheGoldChild *CacheGoldChildSession) UnsetFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.UnsetFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

func (_CacheGoldChild *CacheGoldChildTransactorSession) UnsetFeeExempt(account common.Address) (*types.Transaction, error) {
	return _CacheGoldChild.Contract.UnsetFeeExempt(&_CacheGoldChild.TransactOpts, account)
}

type CacheGoldChildAccountInactiveIterator struct {
	Event *CacheGoldChildAccountInactive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildAccountInactiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildAccountInactive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildAccountInactive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildAccountInactiveIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildAccountInactiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildAccountInactive struct {
	Account    common.Address
	FeePerYear *big.Int
	Raw        types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterAccountInactive(opts *bind.FilterOpts, account []common.Address) (*CacheGoldChildAccountInactiveIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "AccountInactive", accountRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildAccountInactiveIterator{contract: _CacheGoldChild.contract, event: "AccountInactive", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchAccountInactive(opts *bind.WatchOpts, sink chan<- *CacheGoldChildAccountInactive, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "AccountInactive", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildAccountInactive)
				if err := _CacheGoldChild.contract.UnpackLog(event, "AccountInactive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseAccountInactive(log types.Log) (*CacheGoldChildAccountInactive, error) {
	event := new(CacheGoldChildAccountInactive)
	if err := _CacheGoldChild.contract.UnpackLog(event, "AccountInactive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildAccountReActiveIterator struct {
	Event *CacheGoldChildAccountReActive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildAccountReActiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildAccountReActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildAccountReActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildAccountReActiveIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildAccountReActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildAccountReActive struct {
	Account common.Address
	Raw     types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterAccountReActive(opts *bind.FilterOpts, account []common.Address) (*CacheGoldChildAccountReActiveIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "AccountReActive", accountRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildAccountReActiveIterator{contract: _CacheGoldChild.contract, event: "AccountReActive", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchAccountReActive(opts *bind.WatchOpts, sink chan<- *CacheGoldChildAccountReActive, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "AccountReActive", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildAccountReActive)
				if err := _CacheGoldChild.contract.UnpackLog(event, "AccountReActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseAccountReActive(log types.Log) (*CacheGoldChildAccountReActive, error) {
	event := new(CacheGoldChildAccountReActive)
	if err := _CacheGoldChild.contract.UnpackLog(event, "AccountReActive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildAddressChangeIterator struct {
	Event *CacheGoldChildAddressChange

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildAddressChangeIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildAddressChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildAddressChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildAddressChangeIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildAddressChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildAddressChange struct {
	AddressType string
	Account     common.Address
	Raw         types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterAddressChange(opts *bind.FilterOpts, account []common.Address) (*CacheGoldChildAddressChangeIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "AddressChange", accountRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildAddressChangeIterator{contract: _CacheGoldChild.contract, event: "AddressChange", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchAddressChange(opts *bind.WatchOpts, sink chan<- *CacheGoldChildAddressChange, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "AddressChange", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildAddressChange)
				if err := _CacheGoldChild.contract.UnpackLog(event, "AddressChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseAddressChange(log types.Log) (*CacheGoldChildAddressChange, error) {
	event := new(CacheGoldChildAddressChange)
	if err := _CacheGoldChild.contract.UnpackLog(event, "AddressChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildApprovalIterator struct {
	Event *CacheGoldChildApproval

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildApprovalIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildApprovalIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*CacheGoldChildApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildApprovalIterator{contract: _CacheGoldChild.contract, event: "Approval", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CacheGoldChildApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildApproval)
				if err := _CacheGoldChild.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseApproval(log types.Log) (*CacheGoldChildApproval, error) {
	event := new(CacheGoldChildApproval)
	if err := _CacheGoldChild.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildFeeChangeIterator struct {
	Event *CacheGoldChildFeeChange

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildFeeChangeIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildFeeChangeIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildFeeChange struct {
	FeeType string
	Fee     *big.Int
	Raw     types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterFeeChange(opts *bind.FilterOpts) (*CacheGoldChildFeeChangeIterator, error) {

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "FeeChange")
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildFeeChangeIterator{contract: _CacheGoldChild.contract, event: "FeeChange", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchFeeChange(opts *bind.WatchOpts, sink chan<- *CacheGoldChildFeeChange) (event.Subscription, error) {

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "FeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildFeeChange)
				if err := _CacheGoldChild.contract.UnpackLog(event, "FeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseFeeChange(log types.Log) (*CacheGoldChildFeeChange, error) {
	event := new(CacheGoldChildFeeChange)
	if err := _CacheGoldChild.contract.UnpackLog(event, "FeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildMintIterator struct {
	Event *CacheGoldChildMint

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildMintIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildMintIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildMint struct {
	Amount *big.Int
	User   common.Address
	Raw    types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterMint(opts *bind.FilterOpts) (*CacheGoldChildMintIterator, error) {

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildMintIterator{contract: _CacheGoldChild.contract, event: "Mint", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *CacheGoldChildMint) (event.Subscription, error) {

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildMint)
				if err := _CacheGoldChild.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseMint(log types.Log) (*CacheGoldChildMint, error) {
	event := new(CacheGoldChildMint)
	if err := _CacheGoldChild.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildOwnershipTransferredIterator struct {
	Event *CacheGoldChildOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CacheGoldChildOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildOwnershipTransferredIterator{contract: _CacheGoldChild.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CacheGoldChildOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildOwnershipTransferred)
				if err := _CacheGoldChild.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseOwnershipTransferred(log types.Log) (*CacheGoldChildOwnershipTransferred, error) {
	event := new(CacheGoldChildOwnershipTransferred)
	if err := _CacheGoldChild.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildRoleAdminChangedIterator struct {
	Event *CacheGoldChildRoleAdminChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildRoleAdminChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildRoleAdminChangedIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CacheGoldChildRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildRoleAdminChangedIterator{contract: _CacheGoldChild.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CacheGoldChildRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildRoleAdminChanged)
				if err := _CacheGoldChild.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseRoleAdminChanged(log types.Log) (*CacheGoldChildRoleAdminChanged, error) {
	event := new(CacheGoldChildRoleAdminChanged)
	if err := _CacheGoldChild.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildRoleGrantedIterator struct {
	Event *CacheGoldChildRoleGranted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildRoleGrantedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildRoleGrantedIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CacheGoldChildRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildRoleGrantedIterator{contract: _CacheGoldChild.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CacheGoldChildRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildRoleGranted)
				if err := _CacheGoldChild.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseRoleGranted(log types.Log) (*CacheGoldChildRoleGranted, error) {
	event := new(CacheGoldChildRoleGranted)
	if err := _CacheGoldChild.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildRoleRevokedIterator struct {
	Event *CacheGoldChildRoleRevoked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildRoleRevokedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildRoleRevokedIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CacheGoldChildRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildRoleRevokedIterator{contract: _CacheGoldChild.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CacheGoldChildRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildRoleRevoked)
				if err := _CacheGoldChild.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseRoleRevoked(log types.Log) (*CacheGoldChildRoleRevoked, error) {
	event := new(CacheGoldChildRoleRevoked)
	if err := _CacheGoldChild.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildTransferIterator struct {
	Event *CacheGoldChildTransfer

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildTransferIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildTransferIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CacheGoldChildTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildTransferIterator{contract: _CacheGoldChild.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CacheGoldChildTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildTransfer)
				if err := _CacheGoldChild.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseTransfer(log types.Log) (*CacheGoldChildTransfer, error) {
	event := new(CacheGoldChildTransfer)
	if err := _CacheGoldChild.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CacheGoldChildWithdrawBurnIterator struct {
	Event *CacheGoldChildWithdrawBurn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CacheGoldChildWithdrawBurnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CacheGoldChildWithdrawBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CacheGoldChildWithdrawBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CacheGoldChildWithdrawBurnIterator) Error() error {
	return it.fail
}

func (it *CacheGoldChildWithdrawBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CacheGoldChildWithdrawBurn struct {
	From   common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_CacheGoldChild *CacheGoldChildFilterer) FilterWithdrawBurn(opts *bind.FilterOpts) (*CacheGoldChildWithdrawBurnIterator, error) {

	logs, sub, err := _CacheGoldChild.contract.FilterLogs(opts, "withdrawBurn")
	if err != nil {
		return nil, err
	}
	return &CacheGoldChildWithdrawBurnIterator{contract: _CacheGoldChild.contract, event: "withdrawBurn", logs: logs, sub: sub}, nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) WatchWithdrawBurn(opts *bind.WatchOpts, sink chan<- *CacheGoldChildWithdrawBurn) (event.Subscription, error) {

	logs, sub, err := _CacheGoldChild.contract.WatchLogs(opts, "withdrawBurn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CacheGoldChildWithdrawBurn)
				if err := _CacheGoldChild.contract.UnpackLog(event, "withdrawBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CacheGoldChild *CacheGoldChildFilterer) ParseWithdrawBurn(log types.Log) (*CacheGoldChildWithdrawBurn, error) {
	event := new(CacheGoldChildWithdrawBurn)
	if err := _CacheGoldChild.contract.UnpackLog(event, "withdrawBurn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_CacheGoldChild *CacheGoldChild) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CacheGoldChild.abi.Events["AccountInactive"].ID:
		return _CacheGoldChild.ParseAccountInactive(log)
	case _CacheGoldChild.abi.Events["AccountReActive"].ID:
		return _CacheGoldChild.ParseAccountReActive(log)
	case _CacheGoldChild.abi.Events["AddressChange"].ID:
		return _CacheGoldChild.ParseAddressChange(log)
	case _CacheGoldChild.abi.Events["Approval"].ID:
		return _CacheGoldChild.ParseApproval(log)
	case _CacheGoldChild.abi.Events["FeeChange"].ID:
		return _CacheGoldChild.ParseFeeChange(log)
	case _CacheGoldChild.abi.Events["Mint"].ID:
		return _CacheGoldChild.ParseMint(log)
	case _CacheGoldChild.abi.Events["OwnershipTransferred"].ID:
		return _CacheGoldChild.ParseOwnershipTransferred(log)
	case _CacheGoldChild.abi.Events["RoleAdminChanged"].ID:
		return _CacheGoldChild.ParseRoleAdminChanged(log)
	case _CacheGoldChild.abi.Events["RoleGranted"].ID:
		return _CacheGoldChild.ParseRoleGranted(log)
	case _CacheGoldChild.abi.Events["RoleRevoked"].ID:
		return _CacheGoldChild.ParseRoleRevoked(log)
	case _CacheGoldChild.abi.Events["Transfer"].ID:
		return _CacheGoldChild.ParseTransfer(log)
	case _CacheGoldChild.abi.Events["WithdrawBurn"].ID:
		return _CacheGoldChild.ParseWithdrawBurn(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CacheGoldChildAccountInactive) Topic() common.Hash {
	return common.HexToHash("0x481010afe95c4aad3901e4d3948ca845e8772b11b72f77bf2dd74a9940e21a21")
}

func (CacheGoldChildAccountReActive) Topic() common.Hash {
	return common.HexToHash("0x96cc51e6ab9b6970cc6fc055179c755849347faa4f703098b52724f2a76ad956")
}

func (CacheGoldChildAddressChange) Topic() common.Hash {
	return common.HexToHash("0xf01df6097899c4c56c975ef84404392d5cf3d3664ba387b392c13e5e2974527b")
}

func (CacheGoldChildApproval) Topic() common.Hash {
	return common.HexToHash("0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925")
}

func (CacheGoldChildFeeChange) Topic() common.Hash {
	return common.HexToHash("0x9ce010994eb307d3d21dc4d32471b192947a8e6b07f597325e8ed94d53685a69")
}

func (CacheGoldChildMint) Topic() common.Hash {
	return common.HexToHash("0xf3cea5493d790af0133817606f7350a91d7f154ea52eaa79d179d4d231e50102")
}

func (CacheGoldChildOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CacheGoldChildRoleAdminChanged) Topic() common.Hash {
	return common.HexToHash("0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff")
}

func (CacheGoldChildRoleGranted) Topic() common.Hash {
	return common.HexToHash("0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d")
}

func (CacheGoldChildRoleRevoked) Topic() common.Hash {
	return common.HexToHash("0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b")
}

func (CacheGoldChildTransfer) Topic() common.Hash {
	return common.HexToHash("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef")
}

func (CacheGoldChildWithdrawBurn) Topic() common.Hash {
	return common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
}

func (_CacheGoldChild *CacheGoldChild) Address() common.Address {
	return _CacheGoldChild.address
}

type CacheGoldChildInterface interface {
	DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error)

	FEEENFORCERROLE(opts *bind.CallOpts) ([32]byte, error)

	INACTIVETHRESHOLDDAYS(opts *bind.CallOpts) (*big.Int, error)

	Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error)

	BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error)

	BalanceOfNoFees(opts *bind.CallOpts, owner common.Address) (*big.Int, error)

	CalcInactiveFee(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	CalcOwedFees(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	CalcStorageFee(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	CalcTransferFee(opts *bind.CallOpts, account common.Address, value *big.Int) (*big.Int, error)

	ConnectedToken(opts *bind.CallOpts) (common.Address, error)

	DaysSinceActivity(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	DaysSincePaidStorageFee(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	Decimals(opts *bind.CallOpts) (uint8, error)

	FxManager(opts *bind.CallOpts) (common.Address, error)

	GetFeeAddress(opts *bind.CallOpts) (common.Address, error)

	GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error)

	HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error)

	IsAllFeeExempt(opts *bind.CallOpts, account common.Address) (bool, error)

	IsInactive(opts *bind.CallOpts, account common.Address) (bool, error)

	IsStorageFeeExempt(opts *bind.CallOpts, account common.Address) (bool, error)

	IsTransferFeeExempt(opts *bind.CallOpts, account common.Address) (bool, error)

	MaximumTransferAmount(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	Name(opts *bind.CallOpts) (string, error)

	RedeemAddress(opts *bind.CallOpts) (common.Address, error)

	StorageFee(opts *bind.CallOpts, balance *big.Int, daysSinceStoragePaid *big.Int) (*big.Int, error)

	StorageFeeGracePeriodDays(opts *bind.CallOpts) (*big.Int, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	Symbol(opts *bind.CallOpts) (string, error)

	TotalCirculation(opts *bind.CallOpts) (*big.Int, error)

	TotalSupply(opts *bind.CallOpts) (*big.Int, error)

	TransferFeeBasisPoints(opts *bind.CallOpts) (*big.Int, error)

	Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error)

	Burn(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error)

	DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error)

	ForcePayFees(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)

	IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, __feeAddress common.Address, __feeEnforcer common.Address, __fxManager_ common.Address, __connectedToken common.Address, __redeemAddress common.Address) (*types.Transaction, error)

	Mint(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error)

	PayStorageFee(opts *bind.TransactOpts) (*types.Transaction, error)

	RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)

	RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)

	SetAccountInactive(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	SetFeeAddress(opts *bind.TransactOpts, newFeeAddress common.Address) (*types.Transaction, error)

	SetFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	SetFxManager(opts *bind.TransactOpts, __fxManager common.Address) (*types.Transaction, error)

	SetRedeemAddress(opts *bind.TransactOpts, newRedeemAddress common.Address) (*types.Transaction, error)

	SetStorageFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	SetStorageFeeGracePeriodDays(opts *bind.TransactOpts, daysGracePeriod *big.Int) (*types.Transaction, error)

	SetTransferFeeBasisPoints(opts *bind.TransactOpts, fee *big.Int) (*types.Transaction, error)

	SetTransferFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error)

	TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error)

	UnsetFeeExempt(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error)

	FilterAccountInactive(opts *bind.FilterOpts, account []common.Address) (*CacheGoldChildAccountInactiveIterator, error)

	WatchAccountInactive(opts *bind.WatchOpts, sink chan<- *CacheGoldChildAccountInactive, account []common.Address) (event.Subscription, error)

	ParseAccountInactive(log types.Log) (*CacheGoldChildAccountInactive, error)

	FilterAccountReActive(opts *bind.FilterOpts, account []common.Address) (*CacheGoldChildAccountReActiveIterator, error)

	WatchAccountReActive(opts *bind.WatchOpts, sink chan<- *CacheGoldChildAccountReActive, account []common.Address) (event.Subscription, error)

	ParseAccountReActive(log types.Log) (*CacheGoldChildAccountReActive, error)

	FilterAddressChange(opts *bind.FilterOpts, account []common.Address) (*CacheGoldChildAddressChangeIterator, error)

	WatchAddressChange(opts *bind.WatchOpts, sink chan<- *CacheGoldChildAddressChange, account []common.Address) (event.Subscription, error)

	ParseAddressChange(log types.Log) (*CacheGoldChildAddressChange, error)

	FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*CacheGoldChildApprovalIterator, error)

	WatchApproval(opts *bind.WatchOpts, sink chan<- *CacheGoldChildApproval, owner []common.Address, spender []common.Address) (event.Subscription, error)

	ParseApproval(log types.Log) (*CacheGoldChildApproval, error)

	FilterFeeChange(opts *bind.FilterOpts) (*CacheGoldChildFeeChangeIterator, error)

	WatchFeeChange(opts *bind.WatchOpts, sink chan<- *CacheGoldChildFeeChange) (event.Subscription, error)

	ParseFeeChange(log types.Log) (*CacheGoldChildFeeChange, error)

	FilterMint(opts *bind.FilterOpts) (*CacheGoldChildMintIterator, error)

	WatchMint(opts *bind.WatchOpts, sink chan<- *CacheGoldChildMint) (event.Subscription, error)

	ParseMint(log types.Log) (*CacheGoldChildMint, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CacheGoldChildOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CacheGoldChildOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CacheGoldChildOwnershipTransferred, error)

	FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CacheGoldChildRoleAdminChangedIterator, error)

	WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CacheGoldChildRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error)

	ParseRoleAdminChanged(log types.Log) (*CacheGoldChildRoleAdminChanged, error)

	FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CacheGoldChildRoleGrantedIterator, error)

	WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CacheGoldChildRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error)

	ParseRoleGranted(log types.Log) (*CacheGoldChildRoleGranted, error)

	FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CacheGoldChildRoleRevokedIterator, error)

	WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CacheGoldChildRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error)

	ParseRoleRevoked(log types.Log) (*CacheGoldChildRoleRevoked, error)

	FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CacheGoldChildTransferIterator, error)

	WatchTransfer(opts *bind.WatchOpts, sink chan<- *CacheGoldChildTransfer, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseTransfer(log types.Log) (*CacheGoldChildTransfer, error)

	FilterWithdrawBurn(opts *bind.FilterOpts) (*CacheGoldChildWithdrawBurnIterator, error)

	WatchWithdrawBurn(opts *bind.WatchOpts, sink chan<- *CacheGoldChildWithdrawBurn) (event.Subscription, error)

	ParseWithdrawBurn(log types.Log) (*CacheGoldChildWithdrawBurn, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
